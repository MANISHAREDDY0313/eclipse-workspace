package com.mythri.dao;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.mythri.dto.Employee;


@Repository("empDao")
//Spring @Repository annotation is used to indicate that the 
//class provides the mechanism for storage, retrieval, 
//search, update and delete operation on objects.
public class EmployeeDao {
	static int resultsPerPage;
	static Properties props;
		
		static {
			String resourceName = "config.properties"; // could also be a constant
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			 props = new Properties();
			try(InputStream resourceStream = loader.getResourceAsStream(resourceName)) {
			    props.load(resourceStream);
			} catch (IOException e) {
				
			}
			resultsPerPage =Integer.parseInt((String)props.get("pageSize"));
		}

	public EmployeeListResponse listEmployeess(int pageId) {
			Session sf = sessionFactory.openSession();
			Query query2 = sf.createQuery("select count(*) from Employee");
			long count = (Long)query2.uniqueResult();
			
			Query query = sf.createQuery("from Employee");
	    
	    //set the pagization properties:
	    query.setMaxResults(resultsPerPage);
			int fr =(pageId-1)*resultsPerPage;
			long noOfPages = count%resultsPerPage == 0? count/resultsPerPage :(count/resultsPerPage )+1;
			query.setFirstResult(fr);
			
	    
	    List<Employee> list =(List<Employee>)  query.list();
			sf.close();
			
			return  new EmployeeListResponse(list, noOfPages);
		}
	  
	

	@Autowired
	private SessionFactory sessionFactory;

	public void saveEmployee(final Employee employee) {
		Session session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();
		transaction.begin();
		session.save(employee);// 1 row in emp table
		transaction.commit();
		session.close();
	}

	public boolean isEmployeeExists(String str) {
		Session session = sessionFactory.openSession();
		Query q = session.createQuery("select count(*)from Employee  where loginname=:inputName");
		q.setParameter("inputName", str);
		long count = (Long) q.uniqueResult();
		session.close();
		return count >= 1 ? true : false;
	}
	// method when cutsomer clicks on login button
	// check if the loginname and pawd are matching in the db
	// if the login is success then save the customer name in session and show home
	// page
	// if the login is failure then show login page with error msg "invalid login"

	public Employee getValidEmpByAuth(Employee employee) {
		Session session = sessionFactory.openSession();
		Query q = session.createQuery("from Employee e where e.loginName=:eName and e.password=:ePass");
		q.setParameter("eName", employee.getLoginName());
		q.setParameter("ePass", employee.getPassword());
		Employee validEmp = (Employee) q.uniqueResult();
		session.close();
		return validEmp;
	}

	public Employee searchByName(String name) {
		Session session = sessionFactory.openSession();
		Query q = session.createQuery("from Employee e where loginName=:name");
		q.setParameter("name", name);
		Employee validEmp = (Employee) q.uniqueResult();
		session.close();
		return validEmp;
	}

	public List<Employee> getAllEmployees() {
		Session session = sessionFactory.openSession();
		Criteria c = session.createCriteria(Employee.class);
		List<Employee> list = c.list();
		session.close();
		return list;
	}

	public Employee getEmpById(int id) {
		Session session = sessionFactory.openSession();
		Query q = session.createQuery("from Employee e where id=:id");
		q.setParameter("id", id);
		Employee validEmp = (Employee) q.uniqueResult();
		session.close();
		return validEmp;
	}

	public boolean deleteEmployee(final Employee employee) {
		Session session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();
		transaction.begin();
		session.delete(employee);
		transaction.commit();
		session.close();
		return true;
	}

	public void updateEmployee(final Employee newEmpDetails) {
		Session session = sessionFactory.openSession();
		Transaction transaction = session.getTransaction();
		transaction.begin();

		// get current data
		Employee empFromDB = getEmpById(newEmpDetails.getId());

		// update with new data
		copyEmp(newEmpDetails, empFromDB);

		session.merge(empFromDB);
		transaction.commit();
		session.close();
	}

	private void copyEmp(Employee source, Employee target) {
		if (StringUtils.isNotEmpty(source.getName())) {
			target.setName(source.getName());
		}
		if (StringUtils.isNotEmpty(source.getlName())) {
			target.setlName(source.getlName());
		}
		if (StringUtils.isNotEmpty(source.getEmail())) {
			target.setEmail(source.getEmail());
		}
		target.setAge(source.getAge());
		target.setSalary(source.getSalary());
	}

//change password

}